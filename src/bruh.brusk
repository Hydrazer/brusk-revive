fn main() {
  println!("{:?}", line0());
}
fn line0() -> Vec<f64> {
  map(&|arg_0_1| plus(1_f64, arg_0_1), cons!(69_f64, cons!(3_f64, vec![])))
}

fn negate(a: f64) -> f64 {
  -a
}
fn plus(a: f64, b:f64) -> f64 {
  a + b
}

fn mul(a: f64, b:f64) -> f64 {
  a * b
}

fn div(a: f64, b:f64) -> f64 {
  a / b
}

fn modulus(a: f64, b:f64) -> f64 {
  a % b
}
fn sub(a: f64, b:f64) -> f64 {
  a - b
}

fn map(a: &dyn Fn(f64) -> f64, b: Vec<f64>) -> Vec<f64> {
  b.clone().into_iter().map(|x| a(x)).collect()
}

#[macro_export]
macro_rules! cons {
  ($x:expr, $l:expr) => {{
    let mut l = $l;
    l.push($x);
    l
  }};
}
